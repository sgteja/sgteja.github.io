- title: Structure from Motion (SFM)
  demo: http://sgteja.github.io/reports/SFM_classical.pdf
  # code: https://github.com/crowddj/crowddj-react
  description: SFM is about reconstructing a whole 3D scene and simultaneously obtaining camera poses from a set of images taken by a monocular camera at different locations and positions of a scene. The problem here is often referred to as Structure from Motion (SFM).
  img: SFM_classical
  used:
    - thing: Python
    - thing: OpenCV
    - thing: RANSAC
    - thing: Fundamental and Essential Matrix
    - thing: Nonlinear Triangulation
    - thing: Perspective-n-Point
    - thing: Bundle adjustment

- title: Learning SfM, an Unsupervised way
  demo:  http://sgteja.github.io/reports/SFM_deep.pdf
  description: An unsupervised learning approach for predicting the monocular depth and ego-motion from the video sequences. I improved the end-to-end learning approach presented in <a href="https://ai.google/research/pubs/pub46023/" target="_blank">SfMLearner</a>. In contrast to the original SfMLearner, our training data was limited to a subset of the original KITTI dataset. I used ResNet architecture for depth estimation, with SSIM and forward-backward consistency loss, which is from <a href="https://arxiv.org/abs/1803.02276" target="_blank">GeoNet</a>. The evaluations and comparison showed the effectiveness of my approach, which improved the abs_rel depth metric of SfMLearner by 18%.
  img: SFM_deep
  used:
    - thing: Python
    - thing: Tensor-Flow
    - thing: OpenCV
    - thing: SFMLearner
    - thing: KITTI dataset
    - thing: ResNet arhitecture
    - thing: Unsupervised Learning

- title: Face Swap
  demo: http://sgteja.github.io/reports/FaceSwap.pdf
  description: An end-to-end pipeline of swapping two faces in a video, by using both classical (Dlib library) and deep-learning (<a href="https://arxiv.org/abs/1803.07835" target="_blank">PRNet</a>) methods for getting facial fiducials. The Face Swap in two scenarios is shown, first between two faces in the same video and in second, a face in a video with a face in from given image. The resulting videos can be viewed <a href="https://drive.google.com/drive/folders/1TWO6Hed_34k3yZWGM-GOuf4xCKWST9Er?usp=sharing" target="_blank">here</a>.
  img: FaceSwap
  video: https://www.youtube.com/embed/hyz17mHsGcM?
  used:
    - thing: Python
    - thing: Tensor-Flow
    - thing: Dlib library
    - thing: OpenCV
    - thing: Delaunay Triangulation
    - thing: Thin Plate Spine

- title: Panorama Stitching
  demo: http://sgteja.github.io/reports/Pano.pdf
  description: In this project, two or more images were stitched together into one seamless panorama image. The estimation of homography between the pictures performed in both classical (Harris corners, RANSAC) and deep-learning methods (<a href="https://arxiv.org/pdf/1606.03798.pdf" target="_blank">HomographyNet</a>). The deep-learning approach had both supervised (HomographyNet) and <a href="https://arxiv.org/abs/1709.03966" target="_blank">unsupervised</a> methods. Although, the deep-learning techniques were able to provide satisfactory results on the synthetic data but not between two images to be stitched. Hence, I performed the stitching of images using the classical approach.
  img: Pano
  used:
    - thing: Python
    - thing: Tensor-Flow
    - thing: OpenCV
    - thing: RANSAC
    - thing: Harris corner
    - thing: Homography estimation

- title: Lane Detection
  demo: http://sgteja.github.io/reports/LaneDetection.pdf
  description: Lane Detection on a video sequence taken from a moving car. An algorithm was designed to detect lanes on the road and to estimate the road curvature to predict the turns made. The results are in these <a href="https://drive.google.com/open?id=1kwCBzWDV0Uqmww-n54ch6un3r8DlcdMQ" target="_blank">videos</a>.
  img: LaneDetection
  video: https://www.youtube.com/embed/playlist?list=PLRKLP7hn6Hr5dfSO4_SiTfHtZQOZky42Q&
  used:
    - thing: Python
    - thing: OpenCV
    - thing: Homography
    - thing: Histogram
    - thing: Sobel filter

- title: Visual Odometry
  demo: http://sgteja.github.io/reports/VisualOdometry.pdf
  description: In Visual Odometry, by utilizing successive frames of a car's movement, I generated a plot of the camera's trajectory, i.e., the path taken by the vehicle. Non-linear optimizations were performed to achieve the right pose of the camera. The input videos are from the Oxford dataset.
  img: VisualOdometry
  used: 
    - thing: Python
    - thing: OpenCV
    - thing: RANSAC
    - thing: Essential Matrix
    - thing: Triangulation
    - thing: Perspective-n-Point

- title: Traffic Sign Recognition
  demo: http://sgteja.github.io/reports/TrafficSignDetection.pdf
  description: Detection and recognition of the traffic signs are carried out in this project. In the detection stage, a pipeline was made to extract the possible candidates that contained the traffic sign. And the other part was to correctly classify the detected signals using SVM (Support Vector Machine). A video of a moving car converted into the <a href="https://drive.google.com/open?id=1gte9bEAsReCmg1wpBvpFJU3te3nLWyR-" target="_blank">output</a>, in which the signs are identified and labeled accordingly. The SVM was able to classify 62 signs provided correctly with an accuracy of 99.76% on the test data.
  img: TrafficSignDetection
  video: https://www.youtube.com/embed/KoLAG8vt2PM?
  used: 
    - thing: Python
    - thing: OpenCV
    - thing: HOG
    - thing: SVM

- title: Path Planning 
  code: https://github.com/sgteja/Path-Planning
  description: Via Path Planning, I Implemented the most popular path planning algorithms used in robotics such as A-Star, Dijkstra, and Simple Breadth-First Search. Also, the picture below is from the <a href="https://www.youtube.com/watch?v=ci5iAQYvzLE" target="_blank">implementation</a> of the A-Star algorithm for the differential drive to find the path that the turtle bot had to traverse to reach the goal position while avoiding the obstacles.
  img: PathPlanning
  video: https://www.youtube.com/embed/ci5iAQYvzLE?
  used: 
    - thing: Python
    - thing: Gazebo
    - thing: ROS 
    - thing: A-Star
    - thing: Dijkstra